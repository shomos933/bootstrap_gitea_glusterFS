---
# Обновление системы и установка базовых утилит
- name: Создать swap-файл размером 1GB
  become: yes
  shell: |
    fallocate -l 1G /swapfile || dd if=/dev/zero of=/swapfile bs=1M count=1024
    chmod 600 /swapfile
    mkswap /swapfile
    swapon /swapfile
  args:
    creates: /swapfile

- name: Добавить swap в /etc/fstab
  become: yes
  lineinfile:
    path: /etc/fstab
    line: '/swapfile none swap sw 0 0'
    state: present

- name: Обновление пакетов (Debian/Ubuntu)
  apt:
    update_cache: yes
    upgrade: yes
  when: ansible_os_family == "Debian"

- name: Обновление пакетов (RedHat)
  yum:
    name: "*"
    state: latest
  when: ansible_os_family == "RedHat"

- name: Установка необходимых утилит (Debian/Ubuntu)
  apt:
    name:
      - git
      - wget
      - curl
      - rsyslog
      - openssh-server
    state: present
  when: ansible_os_family == "Debian"

- name: Установка необходимых утилит (RedHat)
  yum:
    name:
      - git
      - wget
      - curl
      - rsyslog
      - openssh-server
    state: present
  when: ansible_os_family == "RedHat"

# дополнительно проверяем, что сервис SSH запущен
- name: Ensure SSH service is enabled and started
  service:
    name: ssh
    state: started
    enabled: yes

# Отключение автоматических обновлений и очистка кэша
- name: Отключить автоматические обновления для Debian/Ubuntu
  copy:
    dest: /etc/apt/apt.conf.d/20auto-upgrades
    content: |
      APT::Periodic::Update-Package-Lists "0";
      APT::Periodic::Unattended-Upgrade "0";
  when: ansible_os_family == "Debian"

- name: Очистить кэш пакетов для Debian/Ubuntu
  apt:
    autoclean: yes
  when: ansible_os_family == "Debian"

- name: Отключить автоматические обновления для RedHat
  copy:
    dest: /etc/dnf/automatic.conf
    content: |
      [commands]
      apply_updates = no
  when: ansible_os_family == "RedHat"

- name: Очистить кэш пакетов для RedHat
  command: dnf clean all
  when: ansible_os_family == "RedHat"

# Отключение спящих режимов
- name: Отключить sleep, suspend, hibernate
  command: systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target

# Копирование скрипта настройки логов (логи будут сохраняться в корне проекта)
- name: Копировать скрипт настройки логов
  copy:
    src: files/setup_log_management.sh
    dest: /usr/local/bin/setup_log_management.sh
    mode: '0755'

# Запуск скрипта настройки логов
- name: Запустить скрипт настройки логов
  command: /usr/local/bin/setup_log_management.sh
  register: log_script_result
  changed_when: false

- name: Вывести результат работы скрипта настройки логов
  debug:
    msg: "{{ log_script_result.stdout_lines }}"

- name: Убедиться, что у юзера {{ mesh_user }} есть .ssh на каждой ноде
  file:
    path: "/home/{{ mesh_user }}/.ssh"
    state: directory
    owner: "{{ mesh_user }}"
    group: "{{ mesh_user }}"
    mode: '0700'
  become: yes
  vars:
    mesh_user: ubuntu     # или jenkins, в зависимости от того, кем будет подключаться Jenkins

- name: Сгенерировать SSH-ключ, если ещё нет
  openssh_keypair:
    path: "/home/{{ mesh_user }}/.ssh/id_rsa"
    type: rsa
    size: 4096
    owner: "{{ mesh_user }}"
    group: "{{ mesh_user }}"
    mode: '0600'
  become: yes
  vars:
    mesh_user: ubuntu

- name: Pre-populate known_hosts with localhost
  known_hosts:
    path: "/root/.ssh/known_hosts"
    name: "{{ item }}"
    key: "{{ lookup('pipe', 'ssh-keyscan -H ' ~ item) }}"
  loop:
    - localhost
    - 127.0.0.1
    - ::1
  delegate_to: localhost
  connection: local
  run_once: true

- name: Собрать публичные ключи всех нод на контроллере
  delegate_to: localhost
  run_once: true
  file:
    path: "{{ playbook_dir }}/.tmp/mesh_keys"
    state: directory
    mode: '0700'

- name: Скопировать публичный ключ с каждой ноды
  delegate_to: "{{ item }}"
  fetch:
    src: "/home/{{ mesh_user }}/.ssh/id_rsa.pub"
    dest: "{{ playbook_dir }}/.tmp/mesh_keys/{{ item }}.pub"
    flat: yes
  loop: "{{ groups['gitea_nodes'] + groups['nfs_server'] }}"  
  vars:
    mesh_user: ubuntu

- name: Подготовить директорию .ssh на гипервизоре
  delegate_to: localhost
  become: yes
  file:
    path: "/root/.ssh"
    state: directory
    mode: '0700'

- name: Добавить все публичные ключи в authorized_keys гипервизора
  delegate_to: localhost
  become: yes
  authorized_key:
    user: root
    state: present
    key: "{{ lookup('file', playbook_dir + '/.tmp/mesh_keys/' + item + '.pub') }}"
  loop: "{{ groups['gitea_nodes'] + groups['nfs_server'] }}"

# 1) Сканируем SSH-ключ гипервизора и сохраняем его в локальный файл
- name: ssh-keyscan hypervisor to local file
  delegate_to: localhost
  run_once: true
  shell: |
    ssh-keyscan -H `hostname -I | awk '{print $2}'` > /tmp/hypervisor_known_hosts
  args:
    creates: /tmp/hypervisor_known_hosts

# 2) Копируем этот файл в /root/.ssh/known_hosts на всех нодах
- name: Distribute hypervisor known_hosts to /root/.ssh/known_hosts
  copy:
    src: /tmp/hypervisor_known_hosts
    dest: "/home/{{ mesh_user }}/.ssh/known_hosts"
    owner: "{{ mesh_user }}"
    group: "{{ mesh_user }}"
    mode: '0644'
  become: yes
  vars:
    mesh_user: ubuntu

- name: Получить stdout `hostname -I`
  command: hostname -I
  register: hv_ip_raw
  changed_when: false
  delegate_to: localhost
      
- name: Add hypervisor entry to /etc/hosts on all nodes
  vars:
    hypervisor_ip: "{{ hv_ip_raw.stdout.split()[1] }}"
  lineinfile:
    path: /etc/hosts
    create: yes
    state: present
    line: "{{ hypervisor_ip }} hypervisor"
  become: yes

- name: Add Gitea and NFS nodes entries to hypervisor /etc/hosts
  delegate_to: localhost
  run_once: true
  vars:
    hosts_list:
      - { name: "gitea-node-1", ip: "{{ groups['jenkins_master'][0] }}" }
      - { name: "gitea-node-2", ip: "{{ groups['jenkins_slave'][0] }}" }
      - { name: "nfs-node",       ip: "{{ groups['nfs_server'][0] }}" }
  block:
    - name: Ensure /etc/hosts exists on hypervisor
      file:
        path: /etc/hosts
        state: touch
      delegate_to: localhost
      become: yes

    - name: Populate hypervisor /etc/hosts with node entries
      lineinfile:
        path: /etc/hosts
        create: yes
        state: present
        line: "{{ item.ip }} {{ item.name }}"
      loop: "{{ hosts_list }}"
      delegate_to: localhost
      become: yes

